# ----------------------------------------------------------------------
# | SSL engine                                                         |
# ----------------------------------------------------------------------

# (1) Optimize SSL by caching session parameters for 24 hours.
#     This cuts down on the number of expensive SSL handshakes.
#     By enabling a cache, we tell the client to re-use the already
#     negotiated state.
#     Here 10m (10 MB) in ssl_session_cache is size value (not time).
#     1 MB cache can store about 4000 sessions, so we can store 40000 sessions.
#
# (2) Use a higher keepalive timeout to reduce the need for repeated handshakes
#     (!) Shouldn't be done unless you serve primarily HTTPS.
#     Default is 75s
#
# (3) SSL buffer size
#     Set 1400 bytes to fit in one MTU.
#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_buffer_size
#
# (4) Disable session tickets
#     Session tickets keys are not auto-rotated. Only a HUP / restart will do
#     so and when a restart is performed the previous key is lost, which resets
#     all previous sessions.
#     Only enable session tickets if you set up a manual rotation mechanism.
#     https://trac.nginx.org/nginx/changeset/1356a3b9692441e163b4e78be4e9f5a46c7479e9/nginx
#     https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_tickets
#
# (5) Basic security improvements

# (1)
ssl_session_timeout 24h;
ssl_session_cache shared:SSL:10m;

# (2)
keepalive_timeout 300s;

# (3)
ssl_buffer_size 1400;

# (4)
ssl_session_tickets off;

# (5)
ssl_prefer_server_ciphers on;


# ----------------------------------------------------------------------
# | SSL policy - Intermediate                                          |
# ----------------------------------------------------------------------

# For services that don't need backward compatibility, the parameters below
# provide a higher level of security.
#
# (!) This policy enforces a strong SSL configuration, which may raise errors
#     with old clients.
#     If a more compatible profile is required, use the intermediate policy.
#
# (1) The NIST curves (prime256v1, secp384r1, secp521r1) are known to be weak
#     and potentially vulnerable but are required to support Microsoft Edge
#     and Safari.
#     https://safecurves.cr.yp.to/
#
# https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html

ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers EECDH+CHACHA20:EECDH+AES;

# (1)
ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;
